#!/bin/bash
# Builds and runs tests on every individual crate in the repo

cargo=cargo

function run_in() {
    arg_directory=$1
    arg_cmd=$2
    check_status=$3
    pushd "$arg_directory" &>/dev/null
    echo $arg_cmd $arg_directory
    $arg_cmd
    result=$?
    popd &>/dev/null
    if [ $check_status -eq 1 ]; then
        if [ $result -ne 0 ]; then
            echo "FAILED"
            exit 1
        fi
    fi 
}

function build_test_dir() {
    arg_directory=$1
    travis=$2
    echo "********************************************"
    echo "* Building/testing $arg_directory"
    echo "********************************************"
    run_in "$arg_directory" "$cargo build" 1
    run_in "$arg_directory" "$cargo test" 1

    # travis-cargo doesn't currently support building examples
    if [ $travis -eq 0 ]; then
        example_dir="$arg_directory/examples"
        if [ -d $example_dir ]; then
            examples=`find $example_dir -iname "*.rs"`
            for example in $examples; do
                example_name=`basename $example .rs`
                run_in "$example_dir" "$cargo build --example $example_name" 1
            done
        else
            echo "No examples to build"
        fi
    else
        echo "Skipping example builds for now"
    fi
}

function print_usage() {
    echo "Usage: all-crates-do [test|test-travis|clean|fmt]"
    exit 1
}

if [ $# -ne 1 ]; then
    print_usage
else
    cmd=$1
    crate_manifests=`find . -iname "Cargo.toml"`
    for crate_manifest in $crate_manifests; do
        crate_dir=`dirname $crate_manifest`
        if [ $cmd == "test" ]; then
            build_test_dir "$crate_dir" 0
        elif [ $cmd == "test-travis" ]; then
            cargo=travis-cargo
            build_test_dir "$crate_dir" 1
        elif [ $cmd == "clean" ]; then
            run_in "$crate_dir" "$cargo clean" 1
        elif [ $cmd == "fmt" ]; then
            run_in "$crate_dir" "$cargo fmt" 0
        else
            echo "Unrecognized command: $cmd"
            print_usage
        fi
    done
fi
